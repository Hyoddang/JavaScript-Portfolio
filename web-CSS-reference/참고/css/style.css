@layer base, rhythm, layout, components, default, overwrites;

@layer base {
  :root {
    /*
    * 폰트, 텍스트
    */
    --font-family-default: 'Noto Sans Display', Inter, Roboto, 'Helvetica Neue', 'Arial Nova', 'Nimbus Sans', Arial, sans-serif;
    --font-family-heading: 'Fraunces', Didot, 'Bodoni MT', 'Noto Serif Display', 'URW Palladio L', P052, Sylfaen, serif;
    --font-family-monospace: 'Nimbus Mono PS', 'Courier New', monospace;

    --max-content-width: 100rem;
    --max-reading-measure: 50ch;
    --min-tap-size: 48px;
    --min-tap-space: 8px;

    /*
    * 색상
    */
    --color-background: #000;
    --color-text: #fff0f4;
    --color-primary: oklch(74% 0.15 32);
    --color-secondary: oklch(65% 0.13 210);
    --color-ui: oklch(65% 0.05 210);

    --color-yellow: oklch(80% 0.16 85);
    --color-green: oklch(60% 0.16 135);
    --color-red: oklch(65% 0.18 15);
    --color-green-2: oklch(54% 0.11 164);
    --color-purple: oklch(62% 0.15 318);
    --color-red-2: oklch(57% 0.2 15);

    --color-link: var(--color-primary);
    --color-link-hover: var(--color-secondary);
  }
}

@layer rhythm {
  body {
    --font-size-min: 16;
    --font-size-max: 20;

    --line-height-min: 1.2;
    --line-height-max: 1.6;

    --font-size-default: var(--font-size);
    --line-height-default: var(--line-height);

    /*
    * 간격 / 리듬
    */
    --spacing: var(--RHYTHM);

/* 
  유용한 제목 스케일
  황금비율: 1.618
  소6도: 1.6
  완전5도: 1.5
  증4도: 1.414
  완전4도: 1.333
  장3도: 1.25
  단3도: 1.2
  장2도: 1.125
  단2도: 1.067

  CSS pow()가 지원되면, 다음 공식을 사용하여 스케일을 만들 수 있습니다:
  --min-font-size: pow(var(--base-font-size-min) * var(--min-heading-scale)), var(--heading-level));
  --max-font-size: pow(var(--base-font-size-max) * var(--max-heading-scale)), var(--heading-level));
*/

    --pl: 1.125;
    --pu: 1.6;

    --s1-min: calc(var(--base-font-size-min) / var(--pl));
    --s1-max: calc(var(--base-font-size-max) / var(--pu));

    --h6-min: var(--base-font-size-min);
    --h6-max: var(--base-font-size-max);

    --h5-min: calc(var(--base-font-size-min) * var(--pl));
    --h5-max: calc(var(--base-font-size-max) * var(--pu));

    --h4-min: calc(var(--h5-min) * var(--pl));
    --h4-max: calc(var(--h5-max) * var(--pu));

    --h3-min: calc(var(--h4-min) * var(--pl));
    --h3-max: calc(var(--h4-max) * var(--pu));

    --h2-min: calc(var(--h3-min) * var(--pl));
    --h2-max: calc(var(--h3-max) * var(--pu));

    --h1-min: calc(var(--h2-min) * var(--pl));
    --h1-max: calc(var(--h2-max) * var(--pu));
  }

  h1,
  h2 {
    --line-height-min: 1.25;
    --line-height-max: 1;

    font-size: var(--font-size);
    font-weight: 200;
    line-height: var(--line-height);
    padding-block: calc(var(--grid-correction, 0) / 2);
  }

  h2 {
    --font-size-min: var(--h2-min);
    --font-size-max: var(--h2-max);
  }
}

@layer base {
  :root {
    -webkit-text-size-adjust: 100%;

    box-sizing: border-box;
    overflow-wrap: break-word;
  }

  *,
  ::before,
  ::after {
    background-repeat: no-repeat;
    box-sizing: inherit;
  }

  /* 텍스트 강조 시 그림자가 가독성을 해치지 않도록 방지 */
  ::-moz-selection {
    background-color: highlight;
    color: highlightText;
    text-shadow: none !important;
  }

  ::selection {
    background-color: highlight;
    color: highlightText;
    text-shadow: none !important;
  }

  html {
    height: 100%;
    scroll-behavior: smooth;
    overflow-x: hidden;
  }

  body {
    background-color: var(--color-background, white);
    color: var(--color-text, black);
    font-family: var(--font-family-default, sans-serif);
    font-size: var(--font-size-default, 1em);
    font-size-adjust: from-font;
    line-height: var(--line-height-default, 1.5);
    text-rendering: optimizeLegibility;
    margin: 0;
    min-height: 100%;
  }

  main {
    outline: 0;
  }

  a {
    color: var(--color-link, blue);
    transition: 0.25s ease-in-out;

    &:hover,
    &:focus {
      color: var(--color-link-hover, var(--color-link, blue));
    }
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: var(--font-family-heading, var(--font-family-default, 1rem));
    line-height: var(--line-height-heading, 1.25);
    font-weight: 400;
    margin-block-start: calc(var(--margin-heading-start, var(--spacing, 1.5rem) * 2));
    margin-block-end: var(--margin-heading-end, var(--spacing, 1.5rem));
  }

  /* 고유 크기를 가진 객체의 너비 제한 */
  img,
  picture,
  object,
  video,
  embed,
  iframe {
    max-width: 100%;
    height: auto;
  }
}
@layer rhythm {
  /*
    수직 리듬을 가진 반응형 타이포그래피
  */
  * {
    /* 1단계: 개별 반응형 글꼴 크기 설정 */
  
    /* 
      최소 및 최대 글꼴 크기를 화면 크기에 맞춤
      즉, 글꼴 크기는 화면 너비 320px에서 16px, 1440px에서 20px이 됩니다.
      이러한 값은 각 요소에서 사용자 정의하여 공식을 자동으로 업데이트할 수 있습니다.
    */

    --font-size-min: 16;
    --font-size-max: 20;
    --font-size-min-viewport: 320;
    --font-size-max-viewport: 1440;
  
    /* 
      접근성과 편의를 위해 px에서 rem으로 자동 변환
      처음부터 글꼴 크기를 rem 단위로 설정하려면 --font-size-units를 1rem으로 설정할 수 있습니다.
      기본 1rem = 16px이므로 1px = 0.0625rem입니다. 
    */
    --font-size-units: calc(0.0625rem);
  
    /* 수학적 계산. 걱정하지 마세요. 건드리지 마세요. */
    --_font-size-step: calc( 
      (var(--font-size-max) - var(--font-size-min)) / 
      (var(--font-size-max-viewport) - var(--font-size-min-viewport))
    );
  
    --_font-size-base-value: calc(
      var(--font-size-min) - 
      var(--font-size-min-viewport) * 
      var(--_font-size-step)
    );
  
/* 
  모든 요소에 글꼴 크기 사용자 정의 속성 생성
  이제 모든 요소가 --font-size 속성을 사용할 수 있습니다.

  더욱이, 위에서 설정한 값을 조정하면 
  --font-size-min 및 --font-size-max처럼 공식이 자동으로 업데이트됩니다.
  뷰포트 단위 --font-size-min-viewport 및 --font-size-max-viewport도 동일하게 적용됩니다.
  각 요소에 사용자 정의 속성을 설정하면
  전체 레이아웃과 리듬이 바뀌지 않고
  해당 요소의 글꼴 크기만 조정됩니다.
*/

  
    --font-size: clamp(
      min(var(--font-size-min), var(--font-size-max)) * var(--font-size-units),
      var(--_font-size-base-value) * var(--font-size-units) + var(--_font-size-step) * 100vw,
      max(var(--font-size-max), var(--font-size-min)) * var(--font-size-units)
    );
  
/* 현재 글꼴 크기에 현재 줄 간격을 고정하기 위해 em 단위 사용 */
--line-height-units: 1em;

/* 최소 및 최대 줄 간격 */
--line-height-min: 1.2;
--line-height-max: 1.6;

/* 글꼴 크기와 동일한 뷰포트 경계를 사용하여, 픽셀에서 글꼴 크기 값으로 변환 */
--line-height-min-viewport: calc(320 / var(--font-size-min));
--line-height-max-viewport: calc(1440 / var(--font-size-max));

/* 알고 있듯이. 손대지 마세요. */
--_line-height-step: calc(
  (var(--line-height-max) - var(--line-height-min)) / 
  (var(--line-height-max-viewport) - var(--line-height-min-viewport))
);
  
    --_line-height-base-value: calc(
      var(--line-height-min) - 
      var(--line-height-min-viewport) * 
      var(--_line-height-step)
    );
  
/* 
  --font-size와 마찬가지로, 이제 모든 요소는 반응형 줄 간격에 접근할 수 있습니다.
  또한 --line-height-min 및 --line-height-max와 같은 위에서 설정한 값을 조정할 수 있습니다.
*/
    --line-height: clamp(
      min(var(--line-height-min), var(--line-height-max)) * var(--line-height-units),
      var(--_line-height-base-value) * var(--line-height-units) + var(--_line-height-step) * 100vw,
      max(var(--line-height-max), var(--line-height-min)) * var(--line-height-units)
    );
  }
  
  body {
    /* 이제 글꼴 크기와 줄 간격을 각각의 속성에 설정할 수 있습니다 */
    font-size: var(--font-size);
    line-height: var(--line-height);
  
  /* 
    이들은 새로운 rem 단위이며, 반응형 본문 글꼴을 참조할 때 언제든지 사용할 수 있습니다.
    주의: 이 값을 상수로 취급하고 편집하거나 덮어쓰지 마세요.
  */
    --RHYTHM_UNITS: var(--font-size);
  
  /* 
    본문 줄 간격에 고정하여 리듬을 만듭니다.
    이 단위는 이제 어디서든 원래의 본문 줄 간격을 참조하여 수직 리듬을 설정할 수 있습니다.
    주의: 이 값을 상수로 취급하고 편집하거나 덮어쓰지 마세요.
  */
    --RHYTHM: clamp(
      min(var(--line-height-min), var(--line-height-max)) * var(--RHYTHM_UNITS),
      var(--_line-height-base-value) * var(--RHYTHM_UNITS) + var(--_line-height-step) * 100vw,
      max(var(--line-height-max), var(--line-height-min)) * var(--RHYTHM_UNITS)
    );
  
  /* 여기서는 필요에 따라 덮어쓰고 사용할 수 있는 안전한 속성입니다 */
    --spacing: var(--RHYTHM);

    /* 혹시 필요할 경우를 대비하여 이 값을 저장합니다 */
    --base-font-size-min: var(--font-size-min);
    --base-font-size-max: var(--font-size-max);
    --base-line-height-min: var(--line-height-min);
    --base-line-height-max: var(--line-height-max);
  }
}
/*
 * 사용된 사용자 정의 속성
 * 초기값을 사용자 정의하려면 반드시 이 값을 설정하세요, 그렇지 않으면 기본값이 사용됩니다
 *
 * --section-spacing-multiplier: 1, 2, 3, 4 (미디어 쿼리)
 * --section-spacing: calc(var(--spacing, 1.5rem) * var(--section-spacing-multiplier));
 * --max-content-width: 100rem
 *
 */

/*----------  페이지 요소  ----------*/

@layer layout {
  header,
  main,
  section,
  article,
  aside,
  nav,
  form,
  div,
  footer {
    /* 섹션과 같은 요소를 위한 섹션 간격 변수를 생성합니다 */
    --section-spacing-multiplier: 1;
    --section-spacing: calc(var(--spacing, 1.5rem) * var(--section-spacing-multiplier));

    @media (min-width: 40em) {
      --section-spacing-multiplier: 2;
    }

    @media (min-width: 60em) {
      --section-spacing-multiplier: 3;
    }

    @media (min-width: 80em) {
      --section-spacing-multiplier: 4;
    }

    @media (min-width: 100em) {
      --section-spacing-multiplier: 5;
    }
  }

  header,
  section,
  footer {
    /* 패딩을 유지하고 가운데 정렬하면서 요소의 너비를 제한합니다 */
    padding-inline: max(var(--section-spacing), calc(50% - var(--max-content-width, 100rem) / 2));
  }

  section {
    padding-block: var(--section-spacing);
  }
}

.site-header {
  overflow: auto;
  padding-block: calc(var(--spacing) / 2);
  position: fixed;
  inset-block-end: 0;
  inset-inline: 0;
  z-index: 10000;

  @media (min-width: 64rem) {
    display: flex;
    inset-block-start: 0;
    inset-block-end: auto;
    flex-direction: row;
    justify-content: space-between;
    align-items: baseline;
  }
}

@supports(animation-timeline: view()) {
  .site-header::after {    
    background-image: linear-gradient(to right, transparent, black);
    content: '';
    display: block;
    position: absolute;
    top: calc(var(--spacing) / 2);
    right: 0;
    width: 33%;
    height: calc(var(--spacing) * 1.5 + 2px);
    pointer-events: none;
  }
}

.fieldset-wrapper {
  --height: calc(var(--spacing) * 2);

  border-radius: calc(var(--height) / 2);
  overflow: auto;

  /* border-radius와 함께 overflow 클리핑으로 인해 생기는 테두리의 알리아스 현상을 방지합니다 */
  padding-inline: 1px;
}

fieldset {
  --font-size-min: 14;
  --font-size-max: 16;

  background-color: hsla(0deg, 0%, 0%, 0.5);
  backdrop-filter: blur(10px);
  border: 1px solid var(--color-ui);
  border-radius: inherit;
  display: flex;
  font-size: var(--font-size);
  margin: 0 auto;
  padding: 0;
  width: max-content;

  @media (min-width: 64rem) {
    margin: 0;
  }
}

label {
  --transition: 0.01s;

  border-radius: inherit;
  overflow: hidden;
  padding-inline: var(--spacing);
  padding-block: calc(var(--spacing) / 4);
  position: relative;
  transition: var(--transition) linear;
  white-space: nowrap;

  &::before {
    content: '';
    background-color: var(--color-ui);
    border-radius: inherit;
    display: block;
    transform: translateX(100.5%);
    transition: inherit;
    position: absolute;
    inset: 0;
    z-index: -1;
  }
}

:checked + label {
  --transition: 0.25s;

  color: var(--color-background);
  overflow: visible;

  &::before {
    transform: translateX(0);
  }

  & ~ label::before {
    transform: translateX(-100.5%);
  }
}

legend {
  color: var(--color-secondary);
}

input {
  accent-color: var(--color-primary);
}

/* 요소를 시각적으로 숨기고, 스크린 리더에서는 접근할 수 있도록 남겨둡니다 */
.sr-only {
  border-width: 0;
  clip: rect(0, 0, 0, 0);
  margin: -1px;
  padding: 0;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
  height: 1px;
}

@media (min-width: 64rem) {
  h1.sr-only {
    --font-size-min: 14;
    --font-size-max: 16;

    all: unset;
    color: var(--color-text);
    font-family: var(--font-family-default);
    font-size: var(--font-size);
    font-weight: 500;
    letter-spacing: 0.01em;
    margin: 0;
  }
}

nav {
  --indicator-number: 5;
  --indicator-top: 50dvb;
  --indicator-right: var(--spacing);

  --indicator-size: 1em;
  --indicator-padding: calc((var(--min-tap-size) - var(--indicator-size)) / 2);
  --indicator-clipped-margins: var(--indicator-padding) * 2;
  --indicator-total-size: calc(var(--indicator-size) + var(--indicator-padding) * 2);

  --indicator-gap: var(--min-tap-space);
  --indicator-total-gap: calc(var(--indicator-gap) * (var(--indicator-number) - 1));

  --indicator-total-height: calc(var(--indicator-total-size) * var(--indicator-number) + var(--indicator-total-gap) - var(--indicator-clipped-margins));

/* 마우스를 사용할 때 인디케이터를 작게 만듭니다 */
  @media (pointer: fine) {
    --indicator-padding: 0.25em;
  }

  position: fixed;
  inset-block-start: var(--indicator-top);
  inset-inline-end: var(--indicator-right);
  margin-block-start: calc(var(--indicator-total-height) / -2);
  z-index: 100;

  & ul {
    display: flex;
    flex-direction: column;
    gap: var(--indicator-gap);
    margin: 0;
    padding: 0;
    position: relative;

    &::before {
      --size: calc(var(--indicator-size));

      border-radius: 50%;
      content: '';
      color: var(--color-indicator, var(--color-text));
      background-color: currentColor;
      box-shadow: inset 0 0 0 4px var(--color-background);
      position: absolute;
      inset-inline: 0;
      margin-inline: auto;
      padding: 3px;
      width: var(--size);
      height: var(--size);
      z-index: -1;
    }
  }

  & li:first-of-type {
    margin-block-start: calc(var(--indicator-padding) * -1);
  }

  & li:last-of-type {
    margin-block-end: calc(var(--indicator-padding) * -1);
  }

  & li,
  & a {
    display: block;
  }

  & a {
    --color-link: var(--color-text);

    padding: var(--indicator-padding);

    &::before {
      content: '';
      border: 1px solid;
      border-radius: 50%;
      display: block;
      width: var(--indicator-size);
      height: var(--indicator-size);
    }
  }
}

@supports not (animation-timeline: scroll()) {
  nav {
    display: none;
  }
}

footer {
  --font-size-min: 14;
  --font-size-max: 16;

  color: var(--color-accent);
  font-size: var(--font-size);
  text-align: center;
  position: relative;
  z-index: 100;
}

.emoji {
  background-color: var(--color-background);
  position: relative;

  &::after {
    content: '';
    position: absolute;
    inset: 0;
    background-color: var(--color-primary);
    mix-blend-mode: hue;
  }
}

.content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding-block: var(--spacing);
  padding-inline: inherit;
  position: relative;
  height: 100%;

  @media (min-width: 64rem) {
    flex-direction: row;
    justify-content: space-between;
  }

  & strong,
  & code {
    color: var(--color-highlight);
  }

  & code {
    font-family: var(--font-family-default);
  }

  & .selector {
    --color-property: var(--color-highlight);

    color: var(--color-selector);
    font-weight: 700;
  }

  & .property {
    --color-property: var(--color-highlight);

    color: var(--color-property);
    font-weight: 700;
  }

  & ul {
    --font-size-min: 14;
    --font-size-max: 16;

    font-size: var(--font-size);
    font-weight: 400;
    list-style-position: inside;
    margin: 0;
    padding: 0;
  }

  & li {
    margin-bottom: calc(var(--spacing) / 2);

    &::marker {
      content: '🌷 ';
      color: var(--color-highlight);
    }
  }
}

h2,
.text {
/* 스크롤 인디케이터를 위한 공간 확보 */

  padding-inline-end: calc(var(--min-tap-size) + var(--spacing));

  @media (min-width: 64rem) {
    padding-inline-end: 0;
  }
}

@supports not (animation-timeline: scroll()) {
  h2,
  .text {
    padding-inline-end: 0;
  }
}

h2 {
  line-height: 1;
  margin-block: var(--spacing);
  text-shadow: 1px 2px 0.1em hsla(0, 0%, 0%, 0.5);
  width: 100%;

  @media (min-width: 64rem) {
    flex: 1;
    margin-block-end: 0;
  }
}

.text {
  --intrinsic-width: 587;
  --intrinsic-height: 930;
  --height: 200px;
  --offset: 200px;

  & img {
    display: block;
    opacity: 0.2;
    position: absolute;
    inset: 0;
    object-fit: contain;
    object-position: top center;
    z-index: -1;
  }

  @media (min-width: 64rem) {
    --height: min(100dvb, 33vw * var(--intrinsic-height) / var(--intrinsic-width));
    --offset: calc(var(--height) / 3);

    flex: 1;
    font-weight: 200;
    padding-block-start: var(--spacing);
    position: relative;
    z-index: -1;

    & img {
      float: inline-start;
      height: var(--height);
      margin-left: calc((1 - var(--intrinsic-width) / var(--intrinsic-height)) * -100%);
      opacity: 0.65;
      position: relative;
      inset: auto;
      shape-outside: var(--image);
      shape-margin: var(--spacing);

      & + * {
        margin-top: calc(var(--spacing) * 3);
      }
    }
  }

  @media (min-width: 64rem) and (min-height: 45rem) {
    & img + * {
      margin-top: calc(var(--spacing) * 4);
    }
  }

  @media (min-width: 90rem) and (min-height: 35rem) {
    & img + * {
      margin-top: var(--offset);
    }
  }
}

section:nth-child(1) {
  --color-highlight: var(--color-primary);
  --color-selector: var(--color-secondary);
  --image: url('https://assets.codepen.io/197359/flower-white.png');
}

section:nth-child(2) {
  --color-highlight: var(--color-yellow);
  --color-selector: var(--color-green);
  --image: url('https://assets.codepen.io/197359/flower-yellow.png');
  --margin-top: 10dvi;
}

section:nth-child(3) {
  --color-highlight: var(--color-secondary);
  --color-selector: var(--color-primary);
  --image: url('https://assets.codepen.io/197359/flower-blue.png');
}

section:nth-child(4) {
  --color-highlight: var(--color-red);
  --color-selector: var(--color-green-2);
  --image: url('https://assets.codepen.io/197359/flower-red.png');
}

section:nth-child(5) {
  --color-highlight: var(--color-purple);
  --color-selector: var(--color-red-2);
  --image: url('https://assets.codepen.io/197359/flower-purple.png');
  --margin-top: 10dvi;
}